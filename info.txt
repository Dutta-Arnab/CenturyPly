start>>>>>> npm run dev

********** query of branch_master ***********
INSERT INTO branch_master (name) 
SELECT DISTINCT BRANCH_NAME FROM master_data
WHERE id != 0

SELECT DISTINCT Branch FROM fulldata
*********************************
con.query("SELECT DISTINCT Prod_Grp2 FROM `master_data` m, `products` p WHERE m.Prod_Grp1=p.name GROUP BY p.name", function (error, result) {
        if (error) return res.status(401).send("Data not fetched")
    res.send(result);
    })


******************* Find All Products ***********************
const sendData = [
        [
            "ABC",
            5
        ],
        [
            "PQR",
            5
        ],
        [
            "XYZ",
            5
        ]
    ];

    con.query("INSERT INTO products (name, parent_id) VALUES ?", [sendData], function (error1, result1) {
        if (error1) return res.status(401).send("Unable to add to product")

        return res.send("Data added...");

    })

    return res.send("All Data added..");

****************** DISTINCT on 4 fields ********************
SELECT DISTINCT Prod_Grp1,Prod_Grp2, Prod_Grp3, Prod_Grp4 FROM `centuryply` ORDER BY Prod_Grp1 ASC

*******************************************************
SELECT LOB, Branch_Name, Year, Month, InvoiceDt, Billed_Amount,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4 FROM `master_data` WHERE LOB IN ('NAP', 'LAM', 'DV', 'PANEL') AND Branch_Name IN ('North-LudhianaVe', 'North-Ludhiana')

************************** api_data from master_data ************************

SELECT LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4, DATE_FORMAT(InvoiceDt,'%Y') Year,DATE_FORMAT(InvoiceDt,'%m') month, sum(Billed_Amount) FROM `master_data` WHERE LOB IN ('NAP', 'LAM', 'DV', 'PANEL') AND Branch_Name IN ('North-LudhianaVe', 'North-Ludhiana')
group by LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,  Year, month






SELECT LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4, Billed_Qty_PCs,sum(Billed_Qty_PCs), Billed_Qty_NA,sum(Billed_Qty_NA), DATE_FORMAT(InvoiceDt,'%Y') Year,DATE_FORMAT(InvoiceDt,'%m') month, sum(Billed_Amount) FROM `master_data` WHERE LOB IN ('NAP', 'LAM', 'DV', 'PANEL') AND Branch_Name IN ('North-LudhianaVe', 'North-Ludhiana')
group by LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,  Year, mont


*********** FInal data api ****************
con.query("SELECT LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,Billed_Qty_PCs,sum(Billed_Qty_PCs), Billed_Qty_NA,sum(Billed_Qty_NA), DATE_FORMAT(InvoiceDt,'%Y') Year,DATE_FORMAT(InvoiceDt,'%m') month, sum(Billed_Amount) FROM `master_data` WHERE LOB IN ? AND Branch_Name IN ? group by LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,  Year, month", [[lobArray], [branchArray]], (error, result) => {
        // if (error) return res.status(401).send("Data not fetched")
        //console.log(brachesssss);
        if (error) return res.send(error)


        res.send(result)
    })


*********** findAllRole *************
Select role.id, role.name, lob_master.id as lob_id, lob_master.lob as lob, branch_master.id, branch_master.name as branch from role JOIN lob_master JOIN branch_master on role.lob_id=lob.id AND role.branches_id=branch_master.id

*********** Insert to role_lob table ***********
INSERT INTO `role_lob` (`id`, `role_id`, `lob_id`) VALUES (NULL, '1', '5'), (NULL, '1', '4');

******************* get all role details ******************
SELECT DISTINCT r.id as Role_id, r.name as Role_Name, lm.lob as LOB_Name, bm.name as Branch_Name, tm.territory as Territory_Name FROM role r JOIN role_lob rl ON r.id=rl.role_id JOIN role_branch rb ON r.id=rb.role_id JOIN role_territory rt ON r.id=rt.role_id JOIN lob_master lm ON rl.lob_id=lm.id JOIN branch_master bm ON rb.branch_id=bm.id JOIN territory_master tm ON rt.territory_id=tm.id


SELECT r.id, r.name,lm.lob FROM role r join role_lob rl ON r.id=rl.role_id JOIN lob_master lm ON rl.lob_id=lm.id WHERE r.id=1 UNION ALL 
SELECT r.id, r.name,bm.name FROM role r join role_branch rb ON r.id=rb.role_id JOIN branch_master bm ON rb.branch_id=bm.id WHERE r.id=1


SELECT (SELECT r.id as Role_id, r.name as Role_Name,lm.lob as LOB FROM role r join role_lob rl ON r.id=rl.role_id JOIN lob_master lm ON rl.lob_id=lm.id WHERE r.id=3) as LOB_Details,
(SELECT r.id as Role_id, r.name as Role_Name,bm.name as Branches FROM role r join role_branch rb ON r.id=rb.role_id JOIN branch_master bm ON rb.branch_id=bm.id WHERE r.id=3) as Branch_Details


SELECT 
LOB_Details.Role_id,
LOB_Details.Role_Name,
LOB_Details.LOB,
Branch_Details.Branches
(SELECT r.id as Role_id, r.name as Role_Name,lm.lob as LOB FROM role r join role_lob rl ON r.id=rl.role_id JOIN lob_master lm ON rl.lob_id=lm.id WHERE r.id=3) as LOB_Details INNER JOIN
(SELECT r.id as Role_id, r.name as Role_Name,bm.name as Branches FROM role r join role_branch rb ON r.id=rb.role_id JOIN branch_master bm ON rb.branch_id=bm.id WHERE r.id=3) as Branch_Details
ON LOB_Details.Role_id= Branch_Details.Role_id

******************* get all user details ******************
SELECT u.id, u.name, u.email, u.Designation,u.role_id, r.name as Role_Name, lm.lob as LOB_Name, bm.name as Branch_Name, tm.territory as Terrioy_Name FROM user u JOIN role r on u.role_id=r.id JOIN role_lob rl ON r.id=rl.role_id JOIN role_branch rb ON r.id=rb.role_id JOIN role_territory rt ON r.id=rt.role_id JOIN lob_master lm ON rl.lob_id=lm.id JOIN branch_master bm ON rb.branch_id=bm.id JOIN territory_master tm ON rt.territory_id=tm.id



SELECT id, name, json_extract(lob, '$') as LOB FROM `role` WHERE id=1

SELECT id, name, JSON_TABLE(role.lob, "$[*].id" COLUMNS(Value INT PATH "$")) FROM role WHERE id=1


******************* NodeMailer ********************
var nodemailer = require('nodemailer');

var transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'sriyank.siddhartha@gmail.com',
    pass: 'xxxx'
  }
});

var mailOptions = {
  from: 'sriyank.siddhartha@gmail.com',
  to: 'smartherd@gmail.com, sriyank@smartherd.com',
  subject: 'Sending Email using Node.js',
  text: `Hi Smartherd, thank you for your nice Node.js tutorials.
          I will donate 50$ for this course. Please send me payment options.`
  // html: '<h1>Hi Smartherd</h1><p>Your Messsage</p>'        
};

transporter.sendMail(mailOptions, function(error, info){
  if (error) {
    console.log(error);
  } else {
    console.log('Email sent: ' + info.response);
  }
});

******************************************
https://crontab.guru/

******************************************
  const letsTry = () => {
    //TODO:----- try with xlsx file

    const xlData = XLSX.readFile("sampleOne.csv", { type: 'binary' });
    const jsonData = xlData.SheetNames.reduce((sheetData, colData) => {
      const colItem = xlData.Sheets[colData];
      sheetData[colData] = XLSX.utils.sheet_to_json(colItem);
      return sheetData;
    }, {});

    con.query("TRUNCATE TABLE fulldata", (error, result) => {
      if (error) return res.status(401).send("Table not truncate")

      const finalData = jsonData.Sheet1;
      //console.log(finalData);
      finalData.map(obj => {
        con.query("INSERT INTO fulldata set ?", obj, (err, res) => {
          if (err) return res.status(401).send("Data not inserted")

          console.log("Data Inserted");
        })
      })
    })

  }

  letsTry()

*****************************************
SELECT DISTINCT f.Branch FROM fulldata f, branch_master bm WHERE f.Branch NOT IN (SELECT name FROM branch_master)

INSERT INTO branch_master (name) SELECT DISTINCT f.Branch FROM fulldata f, branch_master bm WHERE f.Branch NOT IN (SELECT name FROM branch_master)

*****************************************
con.query("SELECT name FROM `branch_master`", (error, result) => {
  if (error) return res.status(401).send("Unable to Update Branch")

  const existingBranch = [];
  result.map((branch, i) => {
    existingBranch.push(result[i].name)
  })
  console.log("existingBranch",existingBranch);
  con.query("SELECT DISTINCT Branch FROM fulldata", (err, res) => {
    if (error) return res.status(401).send("Unable to Update Branch")

    //console.log(res);
    const newBranches = [];
    res.map((branch, j) => {
      newBranches.push(res[j].Branch)
    })
    console.log("newBranches",newBranches);
  })
  const branchesToInsert=[]
  
})

******************role/ctrl*******************
const lobArray = res.currentUser.role.LOB.map(l => l.name)
console.log(lobArray);
const branchArray = res.currentUser.role.branches.map(b => b.name)
console.log(branchArray);
const territoryArray = res.currentUser.role.territory.map(t => t.name)




con.query("SELECT lob from `lob_master`", (error, result) => {
        if (error) return res.status(401).send("Data not fetched")
        AdminLobArray = result.map(l => l.lob)
        con.query("SELECT name from `branch_master`", (error, result) => {
            if (error) return res.status(401).send("Data not fetched")
            AdminBranchArray = result.map(b => b.name)

            con.query("SELECT territory from `territory_master`", (error, result) => {
                if (error) return res.status(401).send("Data not fetched")
                AdminTerritoryArray = result.map(t => t.lob)

                if (isAdmin !== 1 && !AdminLobArray && !AdminBranchArray) {
                    con.query("SELECT LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,Billed_Qty_PCs,sum(Billed_Qty_PCs), Billed_Qty_NA,sum(Billed_Qty_NA), DATE_FORMAT(InvoiceDt,'%Y') Year,DATE_FORMAT(InvoiceDt,'%m') month, sum(Billed_Amount), Target FROM `master_data` WHERE LOB IN ? AND Branch_Name IN ? AND Territory_Name in ? group by LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,  Year, month", [[lobArray], [branchArray], [territoryArray]], (error, result) => {
                        // if (error) return res.status(401).send("Data not fetched")
                        //console.log(brachesssss);
                        if (error) return res.send(error)

                        res.send(result)
                    })
                }
                else {
                    con.query("SELECT LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,Billed_Qty_PCs,sum(Billed_Qty_PCs), Billed_Qty_NA,sum(Billed_Qty_NA), DATE_FORMAT(InvoiceDt,'%Y') Year,DATE_FORMAT(InvoiceDt,'%m') month, sum(Billed_Amount), Target FROM `master_data` WHERE LOB IN ? AND Branch_Name IN ? group by LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,  Year, month", [[AdminLobArray], [AdminBranchArray], [AdminTerritoryArray]], (error, result) => {
                        // if (error) return res.status(401).send("Data not fetched")
                        //console.log(brachesssss);
                        if (error) return res.send(error)

                        res.send(result)
                    })

                }
            })
        })
    })

******************DATA***********************
con.query("SELECT LOB, Branch,Territory_Name,ProductGroup1, Product_Group2,Billed_Qty_PCs_LY,sum(Billed_Qty_PCs_LY), Billed_Qty_NA_TY,sum(Billed_Qty_NA_TY), DATE_FORMAT(InvoiceDt,'%Y') Year,DATE_FORMAT(InvoiceDt,'%m') month, sum(Billed_Amount), Target FROM `fulldata` WHERE LOB IN ? AND Branch_Name IN ?  group by LOB, Branch_Name,Prod_Grp1, Prod_Grp2, Prod_Grp3, Prod_Grp4,  Year, month", [[res.currentUser.role.LOB],[res.currentUser.role.branches], [res.currentUser.role.territory]],(nonAdminError, nonAdminResult) => {
            if (nonAdminError) return res.status(401).send("Data not fetched")

            res.send(nonAdminResult)
        })

*******************API STRUCTURE**************************
====>>>>CREATE ROLE
{
    "name": "New Test",
    "lob": [
        {
            "id": 2
        },
        {
            "id":4
        },
        {
            "id": 6
        }
    ],
    "branch": [
        {
            "id":21
        },
        {
            "id":43
        },
        {
            "id":47
        }
    ],
    "territory":[{
            "id":121
        },
        {
            "id":126
        },
        {
            "id":333
        },
        {
            "id":390
        }]
}

====>>>>Update Role
{
	"name": "DBA",
    "lob": [
        {
            "id": 7
        },
        {
            "id": 3
        },
        {
            "id": 2
        }
    ],
    "branch": [
        {
            "id":1
        }        
    ],
    "territory":[{
            "id":2
        },
        {
            "id":1
        }]
}

====>>>>Create User
{
    "name": "Test123",
	"email" : "test123@yahoo.com",
    "designation": "Des6",
	"isActive": true,
	"role_id":"11"
}

====>>>>Update user
{
    "name": "Test321",
	"email" : "test321@yahoo.com",
    "designation": "Des6",
	"isActive": true,
	"role_id":"11"
}

====>>>>Login
{
    "email":"arnab.dutta@idenisys.net",
    "password":"arnab03472"
}

====>>>>Mail
{
    "email":"dut.arnab92@gmail.com"
}

====>>>>Verify OTP
{
    "email":"arnab.dutta@idenisys.net",
    "otp":"467446",
    "password":"arnab03472"
}